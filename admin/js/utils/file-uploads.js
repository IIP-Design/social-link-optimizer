import { __ } from '@wordpress/i18n';

/**
 * Updates the value of a mission's hidden avatar field to the selected image id.
 *
 * @param {string} filename The name of the uploaded file.
 * @param {int} id The attachment id of the selected mission avatar.
 * @param {string} missionId The id value of the current mission.
 */
const updateAvatarSection = ( filename, id, missionId ) => {
  // Get the mission's hidden avatar field, preview image, and placeholder text.
  const field = document.getElementById( `slo-avatar-${missionId}` );
  const preview = document.getElementById( `slo-avatar-preview-${missionId}` );
  const placeholder = document.getElementById( `slo-avatar-placeholder-${missionId}` );

  // eslint-disable-next-line eqeqeq -- loose comparison is fine since the field value is an int and the response is a string
  const imageUpdated = field.value != id;

  // Hide the preview image upon change.
  if ( preview && imageUpdated ) {
    preview.style.display = 'none';
  }

  // Update the text of the avatar placeholder.
  if ( placeholder && filename ) {
    if ( imageUpdated ) {
      placeholder.style.display = 'block';
    }

    placeholder.innerText = filename;
  } else if ( placeholder ) {
    placeholder.style.display = 'block';
    placeholder.innerText = __( 'No avatar added', 'gpalab-slo' );
  }

  // Update the value of a mission's hidden avatar field to the selected image id.
  field.value = id;

  // Update the text of the selection button.
  const select = document.getElementById( `slo-avatar-manager-${missionId}` );

  if ( !filename ) {
    select.value = __( 'Select an avatar image', 'gpalab-slo' );
  } else {
    select.value = __( 'Change avatar image', 'gpalab-slo' );
  }

  // Toggle the visibility of the remove avatar button.
  const remove = document.getElementById( `slo-avatar-remove-${missionId}` );

  if ( filename ) {
    remove.style.display = 'block';
  } else {
    remove.style.display = 'none';
  }
};

/**
 * Gets the selected image from the media library and uses it to set the hidden field value.
 *
 * @param {Object} frame The media uploader frame generated by the WordPress media library.
 * @param {string} missionId The id value of the current mission.
 */
const onClose = ( frame, missionId ) => {
  const selection = frame
    .state()
    .get( 'selection' )
    .first();

  const filename = selection?.attributes?.filename;
  const id = selection?.attributes?.id;

  updateAvatarSection( filename, id, missionId );
};

/**
 * When the media uploader frame is open, select the image with the id stored in the mission's hidden field.
 *
 * @param {Object} frame The media uploader frame generated by the WordPress media library.
 * @param {string} missionId The id value of the current mission.
 */
const onOpen = ( frame, missionId ) => {
  const field = document.getElementById( `slo-avatar-${missionId}` );

  const selection = frame.state().get( 'selection' );

  if ( field.value && field.value !== 'undefined' ) {
    const { media } = window.wp;

    const attachment = media.attachment( field.value );

    attachment.fetch();

    selection.add( attachment ? [attachment] : [] );
  } else {
    selection.add( [] );
  }
};

/**
 * Loads the media library uploader frame.
 *
 * @param {Event} e A click event object.
 * @param {string} id The id value of the current mission.
 */
export const mediaUploader = ( e, id ) => {
  e.preventDefault();

  const { media } = window.wp;

  let imageFrame;

  if ( imageFrame ) {
    imageFrame.open();
  }

  imageFrame = media( {
    button: {
      text: __( 'Use as mission avatar', 'gpalab-slo' ),
    },
    library: {
      type: 'image',
    },
    multiple: false,
    title: __( 'Add an avatar', 'gpalab-slo' ),
  } );

  imageFrame.on( 'close', () => onClose( imageFrame, id ) );

  imageFrame.on( 'open', () => onOpen( imageFrame, id ) );

  imageFrame.open();
};

export const removeMedia = id => {
  updateAvatarSection( '', '', id );
};
